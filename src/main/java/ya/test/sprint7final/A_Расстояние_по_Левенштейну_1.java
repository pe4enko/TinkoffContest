package ya.test.sprint7final;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

/**
 * https://contest.yandex.ru/contest/25597/run-report/69833832/
 * <pre>
 * -- ПРИНЦИП РАБОТЫ --
 * Для поиска итогового значения используется динамическое программирование - когда задача разбивается на более мелкие
 * задачи. Каждая последующая задача зависит от результатов вычисления предыдущей. При этом существуют базовые случай
 * для которых нам известы результаты вычислений, от которых мы и отталкиваемся на последующих шагах работы алгоритма.
 * Для вычисления расстояния Левенштайна базовыми случаями являются
 *   1) преобразование из пустой строки в пустую, при этом необходимо соверишть 0 операций.
 *   2) Преобразование пустой строки A в строку B, в этом случае потребуется |B| операций вставки символов в строку A.
 *   3) Преобразование НЕ пустой строки А в пустую строку B, в этом случае потребуется |A| операций удаления символов из
 *     строки A.
 * На каждом шаге алгоритма мы должны выбрать какие операции мы должны выполнить так чтобы из строки A получить строку B
 * с наименьшими затратами. Тут возможны варианты:
 * 1) Если строка A заканчивается на тот же символ что и строка B, то в таком случае для преобразования строки A в
 *   строку B потребуется столько же операций сколько и на предыдущем шаге.
 * 2) Если строка A заканчивается на символ отличающийся от символа, на который заканчивается строка B, тогда:
 * 2.1) мы можем предполоджить, что строка А равна строке B если из строки Ai-1 удалить один символ.
 * 2.2) мы можем предполоджить, что строка А равна строке B если к строке Bj-1 прибавить один символ.
 * 2.3) мы можем предполоджить, что кратчайшее редакционное расстояние уже посчитано для строк Ai-1 и Bj-1 тогда,
 *   для получения одинаковых строк необходимо заменить 1 символ в конце любой строки
 * Из этих 3 значений выберем минимальное, это и будет кратчайшим редакционным расстоянием.
 * Итоговое значение будет расплагаться в ячейке dp[|A|][|B|]
 * <p>
 * -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
 * Рассмотрим формулу более подробно. Очевидно, что редакционное расстояние между двумя пустыми строками равно нулю.
 * Так же очевидно то, что чтобы получить пустую строку из строки длиной i, нужно совершить i операций удаления,
 * а чтобы получить строку длиной j из пустой, нужно произвести j операций вставки.
 *
 * Осталось рассмотреть нетривиальный случай, когда обе строки непусты.
 * Для начала заметим, что в оптимальной последовательности операций их можно произвольно менять местами.
 * В самом деле, рассмотрим две последовательные операции:
 * Две замены одного и того же символа — неоптимально (если мы заменили x на y, потом — y на z, выгоднее было сразу заменить x на z).
 * Две замены разных символов можно менять местами
 * Два стирания или две вставки можно менять местами
 * Вставка символа с его последующим стиранием — неоптимально (можно их обе отменить)
 * Стирание и вставку разных символов можно менять местами
 * Вставка символа с его последующей заменой — неоптимально (излишняя замена)
 * Вставка символа и замена другого символа меняются местами
 * Замена символа с его последующим стиранием — неоптимально (излишняя замена)
 * Стирание символа и замена другого символа меняются местами
 * <p>
 * Пусть S1 кончается на символ «a», S2 кончается на символ «b». Есть три варианта:
 *
 * Символ «а», на который кончается S1, в какой-то момент был стёрт. Сделаем это стирание первой операцией.
 * Тогда мы стёрли символ «a», после чего превратили первые i-1 символов S1 в S2 (на что потребовалось D(i-1, j)
 * операций), значит, всего потребовалось D(i-1,j) + 1 операций
 * Символ «b», на который кончается S2, в какой-то момент был добавлен. Сделаем это добавление последней операцией.
 * Мы превратили S1 в первые j-1 символов S2, после чего добавили «b». Аналогично предыдущему случаю,
 * потребовалось D(i, j-1)+1 операций.
 * Если оба предыдущих утверждения неверны. Если мы добавляли символы справа от финального «a», то, чтобы сделать
 * последним символом «b», мы должны были или в какой-то момент добавить его (но тогда утверждение 2 было бы верно),
 * либо заменить на него один из этих добавленных символов (что тоже невозможно, потому что добавление символа с его
 * последующей заменой неоптимально). Значит, символов справа от финального «a» мы не добавляли. Самого финального
 * «a» мы не стирали, поскольку утверждение 1 неверно. Значит, единственный способ изменения последнего символа —
 * его замена. Заменять его 2 или больше раз неоптимально. Значит,
 * Если a=b, мы последний символ не меняли. Поскольку мы его также не стирали и не приписывали
 * ничего справа от него, он не влиял на наши действия, и, значит, мы выполнили D(i-1, j-1) операций.
 * Если a != b, мы последний символ меняли один раз. Сделаем эту замену первой. В дальнейшем, аналогично предыдущему
 * случаю, мы должны выполнить D(i-1, j-1) операций, значит, всего потребуется D(i-1, j-1)+1 операций.
 * <p>
 * -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
 * Временная сложность равна O(|A| * |B|), так как мы должны перебрать все символы двух строк.
 * <p>
 * -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
 * Мы храним сами строки O(|A| + |B|)
 * В процесса вычисления не хранится вся матрица вычислений. Для вычисления на каждом шаге нам нужно хранить только
 * текущую вычисляемую строку матрицы и предыдущую.
 * Поэтому пространственная сложность равно O(2 * |B| + |A| + |B|) = O(|A| + |B|)
 * </pre>
 */
public class A_Расстояние_по_Левенштейну_1 {

    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out))) {

            String a = reader.readLine();
            String b = reader.readLine();

            int al = a.length() + 1;
            int bl = b.length() + 1;
            int[] r0 = new int[bl];
            int[] r1 = new int[bl];

            for (int c = 1; c < bl; c++) {
                r0[c] = c;
            }

            for (int r = 1; r < al; r++) {
                r1[0] = r;

                for (int c = 1; c < bl; c++) {
                    if (a.charAt(r - 1) == b.charAt(c - 1)) {
                        r1[c] = r0[c - 1];
                    } else {
                        int delete = r0[c] + 1;
                        int insert = r1[c - 1] + 1;
                        int replace = r0[c - 1] + 1;

                        r1[c] = Math.min(Math.min(delete, insert), replace);
                    }
                }
                int[] tmp = r1;
                r1 = r0;
                r0 = tmp;
            }

            writer.write(String.valueOf(r0[bl - 1]));
            writer.flush();
        }
    }
}
